//Javascript语言的执行环境是单线程。即一次只能完成一个任务。若有多个任务则需排队逐个执行——前一个任务完成，再执行后一个任务。

/* 这种执行模式实现简单，执行环境相对单纯。但随着前端业务日渐复杂，事务和请求等日渐增多，这种单线程执行方式在复杂的业
务下势必效率低下，只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），
往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。*/

/*为避免和解决这种问题，JS语言将任务执行模式分为异步和同步。同步模式”就是上一段的模式，后一个任务等待前一个任务结束，
然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回调函数（callback）
，前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的
排列顺序是不一致的、异步的。*/

/*“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”
甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。*/



//解决异步问题的方案之一  回调函数：常见应用环境是 Ajax请求~
function A(callback) {
  callback() //耗时的操作并非要顺序执行
  console.log("我是主函数了啦~") //主函数不用等待回调函数的耗时操作
}

function B() {
  setTimeout(() => {
    console.log("我是回调函数")
  }, 3000);
}

A(B)

/**
 * output:
 * 我是主函数了啦~
 * 我是回调函数
 */


 //异步解决方案之二 promise对象的使用

 
